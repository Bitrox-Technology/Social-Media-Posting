import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAppSelector, useAppDispatch } from '../../store/hooks';
import { ArrowLeft } from 'lucide-react';
import {
  useGenerateImageMutation,
  useGenerateCarouselMutation,
  useUploadCarouselMutation,
  usePostContentMutation,
  useGenerateDoYouKnowMutation,
} from '../../store/api';
import { setPosts } from '../../store/appSlice';
import { motion } from 'framer-motion';
import { Swiper, SwiperSlide } from 'swiper/react';
import { Navigation, Pagination } from 'swiper/modules';
import 'swiper/css';
import 'swiper/css/navigation';
import 'swiper/css/pagination';
import { carouselTemplates, Slide } from '../../templetes/templetesDesign';

interface CarouselContent {
  tagline?: string;
  title: string;
  description?: string;
  imageUrl?: string;
}

interface DoYouKnowContent {
  title: string;
  description: string;
}

interface Post {
  topic: string;
  type: 'image' | 'carousel' | 'doyouknow';
  content: string | DoYouKnowContent | string[]; // Aligning with expected type
}

export const AutoPostCreator = () => {
  const navigate = useNavigate();
  const dispatch = useAppDispatch();
  const selectedTopic = useAppSelector((state) => state.app.selectedTopic);
  const postsFromRedux = useAppSelector((state) => state.app.posts);
  const [posts, setLocalPosts] = useState<Post[]>(postsFromRedux);
  const [isLoadingMap, setIsLoadingMap] = useState<Record<string, boolean>>({});
  const [errorMap, setErrorMap] = useState<Record<string, string | null>>({});

  const [generateImage] = useGenerateImageMutation();
  const [generateCarousel] = useGenerateCarouselMutation();
  const [generateDoYouKnow] = useGenerateDoYouKnowMutation();
  const [uploadCarousel] = useUploadCarouselMutation();
  const [postContent] = usePostContentMutation();

  const topics = selectedTopic ? selectedTopic.split(', ').filter(Boolean).slice(0, 7) : [];
  const postTypes: ('image' | 'carousel' | 'doyouknow')[] = [
    'image',
    'carousel',
    'doyouknow',
    'image',
    'carousel',
    'doyouknow',
    'image',
  ];

  useEffect(() => {
    if (!selectedTopic) {
      navigate('/topic');
    }
  }, [selectedTopic, navigate]);

  const generatePost = async (topic: string, index: number) => {
    const type = postTypes[index];
    setIsLoadingMap((prev) => ({ ...prev, [topic]: true }));
    setErrorMap((prev) => ({ ...prev, [topic]: null }));

    try {
      let newPost: Post;
      switch (type) {
        case 'image':
          const imageRes = await generateImage({ prompt: topic }).unwrap();
          newPost = { topic, type, content: imageRes.data };
          break;
        case 'carousel':
          const randomTemplate = carouselTemplates[Math.floor(Math.random() * carouselTemplates.length)];
          const response = await generateCarousel({ topic }).unwrap();
          const generatedContent = response.data;

          const newSlides: Slide[] = randomTemplate.slides.map((slide, index) => {
            const content = generatedContent[index] || {};
            let formattedDescription = content.description || slide.description;

            if ((formattedDescription ?? '').trim().match(/^\d+\./)) {
              formattedDescription = (formattedDescription || '').split(/,\s*\d+\./)
                .map((item, i) => {
                  const cleanItem = item.replace(/^\s*\d+\.\s*/, '').trim();
                  return i === 0 ? cleanItem : `${i + 1}. ${cleanItem}`;
                })
                .join('\n')
                .replace(/^\s+/, '');
            }

            return {
              ...slide,
              tagline: content.tagline || slide.tagline,
              title: content.title || slide.title,
              description: formattedDescription,
              imageUrl: content.imageUrl || slide.imageUrl,
            };
          });

          // Navigate to Carousel component with pre-filled data
          navigate('/carousel', {
            state: {
              topic,
              template: randomTemplate.id,
              slides: newSlides,
              autoGenerated: true,
            },
          });
          setIsLoadingMap((prev) => ({ ...prev, [topic]: false }));
          return; // Exit early since weâ€™re navigating
        case 'doyouknow':
          const doYouKnowRes = await generateDoYouKnow({ topic }).unwrap();
          newPost = { topic, type, content: doYouKnowRes.data };
          break;
        default:
          throw new Error(`Unknown post type: ${type}`);
      }

      const updatedPosts = posts.filter((p) => p.topic !== topic).concat(newPost);
      setLocalPosts(updatedPosts);
      dispatch(setPosts(updatedPosts));

      const postFormData = new FormData();
      postFormData.append('posts', JSON.stringify([newPost]));
      await postContent(postFormData).unwrap();

    } catch (err) {
      console.error(`Error generating post for ${topic}:`, err);
      setErrorMap((prev) => ({
        ...prev,
        [topic]: err instanceof Error ? err.message : 'An error occurred',
      }));
    } finally {
      setIsLoadingMap((prev) => ({ ...prev, [topic]: false }));
    }
  };

  const handleBack = () => {
    navigate('/topic');
  };

  const getSlideDimensions = () => ({
    width: '540px',
    height: '540px',
    maxHeight: '50vh',
    aspectRatio: '1 / 1',
  });

  return (
    <div className="max-w-4xl mx-auto p-4">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center">
          <button
            onClick={handleBack}
            className="flex items-center text-yellow-500 hover:text-yellow-400 transition-colors focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2 focus:ring-offset-gray-900"
          >
            <ArrowLeft className="w-5 h-5 mr-2" />
            Back
          </button>
          <h2 className="text-2xl font-bold text-white ml-4">Auto Post Creator</h2>
        </div>
      </div>

      {topics.length === 0 ? (
        <p className="text-gray-300">No topics selected. Please go back and select topics.</p>
      ) : topics.length < 7 ? (
        <p className="text-red-500">Please select exactly 7 topics to proceed.</p>
      ) : (
        <div className="space-y-4">
          {topics.map((topic, index) => {
            const post = posts.find((p) => p.topic === topic);
            const isLoading = isLoadingMap[topic] || false;
            const error = errorMap[topic];

            return (
              <div key={topic} className="bg-gray-800 p-4 rounded-lg border border-yellow-500/50">
                <div className="flex items-center justify-between">
                  <div className="w-full">
                    <h3 className="text-lg font-semibold text-white">
                      {topic} ({postTypes[index]})
                    </h3>
                    {isLoading && <p className="text-gray-500 mt-2">Generating...</p>}
                    {error && <p className="text-red-500 mt-2">{error}</p>}
                    {post && (
                      <div className="mt-2">
                        {post.type === 'image' ? (
                          <p className="text-gray-300">Image URL: {post.content}</p>
                        ) : post.type === 'carousel' ? (
                          <Swiper
                            modules={[Navigation, Pagination]}
                            navigation={{ nextEl: `.swiper-button-next-${topic}`, prevEl: `.swiper-button-prev-${topic}` }}
                            pagination={{ clickable: true }}
                            spaceBetween={10}
                            slidesPerView={1}
                            className="mt-4"
                          >
                            {(post.content as string[]).map((imageUrl, slideIndex) => (
                              <SwiperSlide key={slideIndex}>
                                <img
                                  src={imageUrl}
                                  alt={`Slide ${slideIndex + 1}`}
                                  style={{
                                    width: getSlideDimensions().width,
                                    height: getSlideDimensions().height,
                                    maxWidth: '100%',
                                    maxHeight: getSlideDimensions().maxHeight,
                                    aspectRatio: getSlideDimensions().aspectRatio,
                                    margin: '0 auto',
                                    objectFit: 'cover',
                                  }}
                                />
                              </SwiperSlide>
                            ))}
                            <div className={`swiper-button-prev-${topic} absolute top-1/2 left-2 text-yellow-400 -translate-y-1/2 z-10`}>
                              <svg className="w-6 h-6" viewBox="0 0 24 24">
                                <path d="M14 18l-6-6 6-6v12z" fill="currentColor" />
                              </svg>
                            </div>
                            <div className={`swiper-button-next-${topic} absolute top-1/2 right-2 text-yellow-400 -translate-y-1/2 z-10`}>
                              <svg className="w-6 h-6" viewBox="0 0 24 24">
                                <path d="M10 6l6 6-6 6V6z" fill="currentColor" />
                              </svg>
                            </div>
                          </Swiper>
                        ) : post.type === 'doyouknow' ? (
                          <p className="text-gray-300">{(post.content as DoYouKnowContent).title}</p>
                        ) : null}
                      </div>
                    )}
                  </div>
                  <motion.button
                    onClick={() => generatePost(topic, index)}
                    disabled={isLoading}
                    className="ml-4 px-4 py-2 bg-yellow-500 text-black font-semibold rounded-lg disabled:opacity-50 disabled:cursor-not-allowed focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2 focus:ring-offset-gray-900"
                    whileHover={{ scale: 1.05, backgroundColor: '#FBBF24' }}
                    whileTap={{ scale: 0.95 }}
                    transition={{ type: 'spring', stiffness: 300 }}
                  >
                    {isLoading ? 'Generating...' : post ? 'Regenerate' : 'Generate'}
                  </motion.button>
                </div>
              </div>
            );
          })}
        </div>
      )}
    </div>

    );
  }